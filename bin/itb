#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use Digest::MD5;

my $uri = $ARGV[0];
my $tmp = "/Users/cjg/Projects/InsideTheBox/var/tmp";
my $cache = "/Users/cjg/Projects/InsideTheBox/var/cache";
my $rapper = "rapper";
# http://triplr.org/ntriples/librdf.org/NEWS.rdf

`rm -rf $tmp/*`;

my $types = {};
my $resource_types = {};
my $type_resources = {};
my $data = new InsideTheBox::Dataset( $filename );
$data->map( sub { my( $t ) = @_;
	return unless( $t->{p} eq "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" );
	$resource_types->{$t->{s}}->{$t->{o}}=1;
	$type_resources->{$t->{o}}->{$t->{s}}=1;
	$types->{$t->{o}}++;
});
# print "Done first pass\n";
my $type_predicates = {};
$data->map( sub { my( $t ) = @_;
	{
		my @types = keys %{$resource_types->{$t->{s}}} ;
		@types = ( 'UNTYPED-RESOURCE' ) unless scalar @types;
		foreach my $type ( @types )
		{
			$type_predicates->{$type}->{rel}->{$t->{p}}->{$t->{s}} = {};
			my @types2 = keys %{$resource_types->{$t->{o}}} ;
			@types2 = ( 'UNTYPED-RESOURCE' ) unless scalar @types2;
			if( $t->{o_type} eq "literal" )
			{
				@types2 = $t->{o_code};
			}
			foreach my $type2 ( @types2 )
			{
				$type_predicates->{$type}->{rel}->{$t->{p}}->{$t->{s}}->{$type2} = 1;
			}
		}
	}
	{
		my @types = keys %{$resource_types->{$t->{o}}} ;
		@types = ( 'UNTYPED-RESOURCE' ) unless scalar @types;
		if( $t->{o_type} eq "literal" )
		{
			@types = $t->{o_code};
		}
		foreach my $type ( @types )
		{
			$type_predicates->{$type}->{invrel}->{$t->{p}}->{$t->{o_code}} = {};
			my @types2 = keys %{$resource_types->{$t->{s}}} ;
			@types2 = ( 'UNTYPED-RESOURCE' ) unless scalar @types2;
			foreach my $type2 ( @types2 )
			{
				$type_predicates->{$type}->{invrel}->{$t->{p}}->{$t->{o_code}}->{$type2} = 1;
			}
		}
	}
});
# print "Done second pass\n";

print "<h1>Dataset Consistency</h1>";
foreach my $type ( sort { $types->{$b}<=>$types->{$a} } keys %{$types} )
{
	print "\n";
	print "\n";
	print "<hr>";
	print "\n";
	# print "$type -> ".$types->{$type}."\n";
	print "<h2>".$types->{$type}." x ".resource_desc($type)."</h2>";
	my $other_types = {};
	foreach my $resource ( keys %{$type_resources->{$type}} )
	{
		OT: foreach my $other_type ( keys %{$resource_types->{$resource}} )
		{
			next OT if $type eq $other_type;
			$other_types->{$other_type}++;
		}
	}
	if( scalar keys %{$other_types} )
	{
		#print "CO-CLASSES:\n";
		print "<h3>Co-classes:</h3>";
		print "<table>";
		foreach my $other_type ( sort { $other_types->{$b}<=>$other_types->{$a} } keys %{$other_types} )
		{
			#print sprintf( "% 5d - % 0.2f%% %s\n", $other_types->{$other_type}, 100*$other_types->{$other_type}/$types->{$type} , $other_type );
			print "<tr>".quantity( $other_types->{$other_type}, $types->{$type} );
			print "<td> are also </td><td>".oresource_desc($other_type,1)."</td></tr>\n";
			
		}
		print "</table>";
	}
	else
	{
		print "<p>No co-classes.</p>";
		#print "NO CO-CLASSES.\n";
	}
	
	print "<h3>Relationships</h3>";
	print "<table border='0'>";
	foreach my $dir ( "rel","invrel" )
	{
		my $preds = $type_predicates->{$type}->{$dir};
		next if( ! scalar keys %$preds );
	
		my $dirlabel =  {"rel"=>"","invrel"=>"Inverse"}->{$dir}." Relationship";
		#print "\u$dir Relationships\n";	
		foreach my $pred ( sort { scalar keys %{$preds->{$b}} <=> scalar keys %{$preds->{$a}}} keys %{$preds} )
		{
			my $n = scalar keys %{$preds->{$pred}};
			#print sprintf( "* % 5d - % 0.2f%% %s\n", $n, 100*$n/$types->{$type} , $pred );
			print "<tr>".quantity( $n, $types->{$type} );
			print "<td> have $dirlabel ".resource_desc($pred).", of which...</td></tr>\n";
			# footle the farbles // can't think of a good variable name
			my $farble = {};
			foreach my $x ( keys %{$preds->{$pred}} )
			{
				foreach my $y ( keys %{$preds->{$pred}->{$x}} )
				{
					$farble->{$y}++;
				}
			}
			print "<tr><td></td><td></td><td></td><td ><table>";
			foreach my $farblekey ( sort { $farble->{$b}<=>$farble->{$a}} keys %{$farble} )
			{
				#print sprintf( "  * % 5d - % 0.2f%% %s\n", $farble->{$farblekey}, 100*$farble->{$farblekey}/$n , $farblekey );
				my $perc = 100*$farble->{$farblekey}/$n;

				print "<tr>".quantity( $farble->{$farblekey}, $n );
				print "<td>relate to ".resource_desc($farblekey,1)."</td></tr>\n";
			}
			print "</table></td></tr>";
		}
	}
	print "</table>";
}

#print Dumper( $types );
#print Dumper( $resource_types );
exit;

sub oresource_desc
{
	my( $uri ) = @_;
	return resource_desc( $uri );
}

my $uri_labels = {};
sub resource_desc
{
	my( $uri, $an ) = @_;

	if( $uri eq "UNTYPED-LITERAL" ) { return ($an?"an ":'')."<b>Untyped Literal</b>"; }
	if( $uri eq "UNTYPED-RESOURCE" ) { return ($an?"an ":'')."<b>Untyped Resource</b>"; }
	if( $uri =~ s/^LITERAL // ) { return ($an?"an ":'')."<b>Literal</b> of type ".resource_desc( $uri ); }

	if( $uri =~ m/http:\/\/www.w3.org\/2001\/XMLSchema#(.*)/ )
	{
		return "<strong><a href='http://www.w3.org/TR/xmlschema-2/#$1'>\u$1</a></string";
	}
		
	if( !defined $uri_labels->{$uri} )
	{
		my $enc_uri = $uri;
		$enc_uri =~ s/([^A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg;
		my $cachefile = $cache."/".$enc_uri;
		if( -e $cachefile )
		{
			open( my $fh, '<:utf8', $cachefile ) || die "Could not (r) open $cachefile: $!";
			$uri_labels->{$uri} = readline($fh);
			close $fh;
		}
		else
		{
			$uri_labels->{$uri} = `curl -s http://graphite.ecs.soton.ac.uk/label/?uri=$enc_uri`;
			open( my $fh, '>:utf8', $cachefile ) || die "Could not (w) open $cachefile: $!";
			print $fh $uri_labels->{$uri};
			close $fh;
		}
	}
	if( defined $uri_labels->{$uri} &&  $uri_labels->{$uri} ne "" ) 
	{ 
		my $r = "";
		if( $an ) { if( $uri_labels->{$uri}=~m/^[aeiou]/i ) { $r="an " } else { $r="a "; }}
		return "$r<b><a href='$uri' title='$uri' >".$uri_labels->{$uri}."</a></b>"; 
	}
	my $r = "";
	if( $an ) { if( $uri=~m/[#\/][aeiou][^#\/]*$/i ) { $r="an " } else { $r="a "; }}
	return "&lt;$uri&gt;";
}


sub quantity
{
	my( $x, $n ) = @_;

	if( $x == $n ) { return "<td colspan='3' style='text-align:right'>ALL</td>"; }

	return sprintf( "<td style='text-align:right'>%d of %d</td><td width='200'><div style='float:left;background-color:#3333ff;height:1em;width:%dpx'></div><div style='float:left;background-color:#cccccc;height:1em;width:%dpx'></div></td><td style='text-align:right'>%0.1f%%</td>", $x, $n, 200*$x/$n, 200-200*$x/$n, 100*$x/$n );
}










package InsideTheBox::Dataset;

use strict;
use Data::Dumper;

sub new
{
	my( $class, $filename ) = @_;

	if( !-e $filename )
	{
		print STDERR "Failed to read $filename\n";
		return;
	}

	my $self = bless { filename=>$filename }, $class;

	return $self;
}

sub map
{
	my( $self, $func ) = @_;
	my $uri_re = "(<([^>]*)>|(_:[^\\s]+))";

	my $n=0;
	open( my $fh, '<:utf8', $self->{filename} ) || die "Could not open ".$self->{filename}.": $!";
	while( my $line = readline($fh) )
	{
		++$n;
		if( $n % 100000 == 0 ) { print STDERR "$n\n"; }
		# may break on \" in literals
		my $t = bless {}, "InsideTheBox::Triple";
		#               1-3       4-6       7 8-10    11      12   13-15    16
		if( $line =~ m/^$uri_re\s+$uri_re\s+($uri_re|"([^"]*)"(\^\^$uri_re|@([a-zA-Z-]+))?)\s+\./ )
		{
			if( defined $2 ) { $t->{s} = $2; $t->{s_type} = 'resource'; }
			if( defined $3 ) { $t->{s} = $3; $t->{s_type} = 'bnode'; }

			if( defined $5 ) { $t->{p} = $5; $t->{p_type} = 'resource'; }
			if( defined $6 ) { $t->{p} = $6; $t->{p_type} = 'bnode'; }

			if( defined $9 ) { $t->{o} = $9; $t->{o_type} = 'resource'; }
			if( defined $10 ) { $t->{o} = $10; $t->{o_type} = 'bnode'; }

			if( defined $11 ) { $t->{o} = $11; $t->{o_type} = 'literal'; }

			if( defined $14 ) { $t->{o_datatype} = $14; } # don't record bnode datatypes?
			if( defined $15 ) { $t->{o_datatype} = $15; } # don't record bnode datatypes?

			if( defined $16 ) { $t->{o_lang} = $16; } 
			
			$t->{o_code} = $t->{o};	
			if( $t->{o_type} eq "literal" ) 
			{ 
				$t->{o_code} = "UNTYPED-LITERAL";
				if( $t->{o_datatype} ) { $t->{o_code} = "LITERAL ".$t->{o_datatype}; }
			}
		}
		else
		{
#			print "FAIL: $line\n";
			next;
		}
		&{$func}( $t );
	}
} 


package InsideTheBox::Triple;

use strict;

